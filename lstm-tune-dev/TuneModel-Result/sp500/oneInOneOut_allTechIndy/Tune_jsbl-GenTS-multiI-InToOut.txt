ab_path = "../data/SPY-Daily-Y09-Now.csv"
stockname='SP500-SPY'

start_date='2012-01-01'
end_date='2022-12-31'

# EMA2 and Signal

my_features=['Price', 'EMA1','EMA2','EMA3','MACD', 'SIGNAL', 'RSI','RSI-MA']
#my_features=['Price', 'EMA1','EMA2','MACD', 'SIGNAL', 'RSI','RSI-MA']
# each feature predict itself

n_early=10

train_ratio=0.8


n_batch=32
n_epochs=100


main_obj_metric='mean_absolute_error'
main_loss='mean_absolute_error'


# 60 predict 1
n_input =60
# define generator

n_features = len(my_features)
print(f"input={n_input} and features={n_features}")

model_path='models'

tune_folder='oneInput_oneOut_SET50'


seed=7

# TUning Part

min_drop=0.0
max_drop=0.3
step_drop=0.1

ratio_traial_max=0.7  # 0.6/0.7
mx_step=3

-------------------------------
Show best hyperparamter values
{'input_unit': 60, 'Dropout_rate': 0.0}
---------------------------

# def my_model(neuron_number,dropout_rate,isTuning):   
def my_model(neuron_number,dropout_rate):  
 model = Sequential()

 model.add(LSTM(units=neuron_number, activation='relu',return_sequences=False, input_shape=(n_input, n_features))) 
 
# if (isTuning==True) or (isTuning==False and dropout_rate>0):
 #  model.add(Dropout(dropout_rate))  
 # else:
 #  print(f"Ignore drop rate {dropout_rate}")  
 model.add(Dropout(dropout_rate))    

 model.add(Dense(n_output))

#https://keras.io/api/metrics/
#https://keras.io/api/losses/
 # model.compile(loss=tf.keras.losses.mean_absolute_error,\
 #               optimizer='adam',metrics =[tf.keras.metrics.mean_absolute_error])
 model.compile(loss=main_loss,\
               optimizer='adam',metrics =[main_obj_metric]) 


--------------------------------
Get n_input to set step for neuron
60= 60 (univariate n_features=1) with step 60 until 180
[60, 120, 180] and [0.  0.1 0.2 0.3]
all combination : 3 x 4 = 12
Max Run=8 of 12 e and each will repeat for essembling model= 3 